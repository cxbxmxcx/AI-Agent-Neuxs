Error loading agent from azure_oai_engine.py: Must provide either the `api_version` argument or the `OPENAI_API_VERSION` environment variable
Loaded 22 actions.
Loaded 4 profiles.
Installed packages from code_env_requirements.txt
Running on local URL:  http://127.0.0.1:7860

To create a public link, set `share=True` in `launch()`.
main logged in successfully.
Plan for Barney: Prompt: 
You are a planner for Nexus.
Your job is to create a properly formatted JSON plan step by step, to satisfy the goal given.
Create a list of subtasks based off the [GOAL] provided.
Each subtask must be from within the [AVAILABLE FUNCTIONS] list. Do not use any functions that are not in the list.
Base your decisions on which functions to use from the description and the name of the function.
Sometimes, a function may take arguments. Provide them if necessary.
The plan should be as short as possible.
You will also be given a list of corrective, suggestive and epistemic feedback from previous plans to help you make your decision.
For example:

[SPECIAL FUNCTIONS]
for-each- prefix
description: execute a function for each item in a list
args: 
- function: the function to execute
- list: the list of items to iterate over
- index: the arg name for the current item in the list

[AVAILABLE FUNCTIONS]
GetJokeTopics
description: Get a list ([str]) of joke topics

EmailTo
description: email the input text to a recipient
args:
- text: the text to email
- recipient: the recipient's email address. Multiple addresses may be included if separated by ';'.

Summarize
description: summarize input text
args:
- text: the text to summarize

Joke
description: Generate a funny joke
args:
- topic: the topic to generate a joke about

[GOAL]
"Get a list of joke topics and generate a different joke for each topic. Email the jokes to a friend."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "GetJokeTopics"},
            {"function": "for-each", "args": {"list": "output_GetJokeTopics", "index": "topic", "function": {"function": "Joke", "args": {"topic": "topic"}}}},
            {"function": "EmailTo", "args": {"text": "for-each_output_GetJokeTopics", "recipient": "friend"}}
        ]
    }

[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

Translate
description: translate the text to another language
args:
- text: the text to translate
- language: the language to translate to

[GOAL]
"Tomorrow is Valentine's day. I need to come up with a few date ideas.
She likes Edgar Allen Poe so write using his style.
E-mail these ideas to my significant other. Translate it to French."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "Brainstorm", args: {"input": "Valentine's Day Date Ideas"}},
            {"function": "Poe", "args": {"text": "output_Brainstorm"},
            {"function": "Translate", "args": {"text":"output_Poe", "language": "French"}}
            {"function": "EmailTo", "args": {"text": "output_Translate","recipient": "significant_other"}}            
        ]
    }
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  
  
[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

GetCoworkerEmails
description: returns a list[] of coworker emails

[GOAL]
"Tomorrow I am announcing my retirement.
I need to write a retirement speech in the style of Edgar Allen Poe.
Then I need to send the email to all of my coworkers."

[OUTPUT]    
    {
    "subtasks": [
        { "function": "Brainstorm", "args": { "input": "Retirement Speech Ideas"}},
        { "function": "Poe", "args": { "text": "output_Brainstorm"}},
        { "function": "GetCoworkerEmails"},
        { "function": "for-each", "args": {"list": "output_GetCoworkerEmails","index": "coworker","function": {"function": "EmailTo","args": {"text": "output_Poe","recipient": "coworker"}}}}
    ]
}
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  

[AVAILABLE FUNCTIONS]
get_content_length_characters
description: Returns the length of the content in characters.
args:
- content: content

get_current_date_and_time
description: Returns the current date and time.

[GOAL]
search wikipedia for pages on Calgary download all the page content and save it a file

Be sure to only use functions from the list of available functions. 
The plan should be as short as possible. 
And only return the plan in JSON format.
[OUTPUT]

Goal: search wikipedia for pages on Calgary download all the page content and save it a file
Plan: {'subtasks': [{'function': 'get_wiki_page_content', 'args': {'topic': 'Calgary', 'language': 'en'}}, {'function': 'save_to_file', 'args': {'content': 'output_get_wiki_page_content', 'file_path': 'Calgary_Wikipedia_page.txt'}}, {'function': 'get_current_date_and_time'}, {'function': 'log_event', 'args': {'message': 'Wikipedia page download completed at {get_current_date_and_time}', 'file_path': 'download_log.txt'}}]}
Running stream for Barney using engine GroqAgent.
Plan for Oscar: Prompt: 
You are a planner for Nexus.
Your job is to create a properly formatted JSON plan step by step, to satisfy the goal given.
Create a list of subtasks based off the [GOAL] provided.
Each subtask must be from within the [AVAILABLE FUNCTIONS] list. Do not use any functions that are not in the list.
Base your decisions on which functions to use from the description and the name of the function.
Sometimes, a function may take arguments. Provide them if necessary.
The plan should be as short as possible.
You will also be given a list of corrective, suggestive and epistemic feedback from previous plans to help you make your decision.
For example:

[SPECIAL FUNCTIONS]
for-each- prefix
description: execute a function for each item in a list
args: 
- function: the function to execute
- list: the list of items to iterate over
- index: the arg name for the current item in the list

[AVAILABLE FUNCTIONS]
GetJokeTopics
description: Get a list ([str]) of joke topics

EmailTo
description: email the input text to a recipient
args:
- text: the text to email
- recipient: the recipient's email address. Multiple addresses may be included if separated by ';'.

Summarize
description: summarize input text
args:
- text: the text to summarize

Joke
description: Generate a funny joke
args:
- topic: the topic to generate a joke about

[GOAL]
"Get a list of joke topics and generate a different joke for each topic. Email the jokes to a friend."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "GetJokeTopics"},
            {"function": "for-each", "args": {"list": "output_GetJokeTopics", "index": "topic", "function": {"function": "Joke", "args": {"topic": "topic"}}}},
            {"function": "EmailTo", "args": {"text": "for-each_output_GetJokeTopics", "recipient": "friend"}}
        ]
    }

[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

Translate
description: translate the text to another language
args:
- text: the text to translate
- language: the language to translate to

[GOAL]
"Tomorrow is Valentine's day. I need to come up with a few date ideas.
She likes Edgar Allen Poe so write using his style.
E-mail these ideas to my significant other. Translate it to French."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "Brainstorm", args: {"input": "Valentine's Day Date Ideas"}},
            {"function": "Poe", "args": {"text": "output_Brainstorm"},
            {"function": "Translate", "args": {"text":"output_Poe", "language": "French"}}
            {"function": "EmailTo", "args": {"text": "output_Translate","recipient": "significant_other"}}            
        ]
    }
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  
  
[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

GetCoworkerEmails
description: returns a list[] of coworker emails

[GOAL]
"Tomorrow I am announcing my retirement.
I need to write a retirement speech in the style of Edgar Allen Poe.
Then I need to send the email to all of my coworkers."

[OUTPUT]    
    {
    "subtasks": [
        { "function": "Brainstorm", "args": { "input": "Retirement Speech Ideas"}},
        { "function": "Poe", "args": { "text": "output_Brainstorm"}},
        { "function": "GetCoworkerEmails"},
        { "function": "for-each", "args": {"list": "output_GetCoworkerEmails","index": "coworker","function": {"function": "EmailTo","args": {"text": "output_Poe","recipient": "coworker"}}}}
    ]
}
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  

[AVAILABLE FUNCTIONS]
save_file
description: 
    Save content to a file.

    :param filename: The name of the file including extension.
    :param content: The content to save in the file.
    
args:
- filename: filename
- content: content

search_wikipedia
description: Searches Wikipedia for the given query and returns a list[] of matching page_ids.
args:
- query: query

get_wikipedia_summary
description: Gets the summary of the Wikipedia page for the given page_id.
args:
- page_id: page_id

get_wikipedia_page
description: Gets the full content of the Wikipedia page for the given page_id.
args:
- page_id: page_id

[GOAL]
search wikipedia for pages on Calgary download all the page content and save it a file

Be sure to only use functions from the list of available functions. 
The plan should be as short as possible. 
And only return the plan in JSON format.
[OUTPUT]

Goal: search wikipedia for pages on Calgary download all the page content and save it a file
Plan: {'subtasks': [{'function': 'search_wikipedia', 'args': {'query': 'Calgary'}}, {'function': 'for-each', 'args': {'list': 'output_search_wikipedia', 'index': 'page_id', 'function': {'function': 'get_wikipedia_page', 'args': {'page_id': 'page_id'}}}}, {'function': 'save_file', 'args': {'filename': 'Calgary_Wikipedia_Pages.txt', 'content': 'for-each_output_search_wikipedia'}}]}
Running stream for Oscar using engine OpenAIAgentEngine.
Plan for Oscar: Prompt: 
You are a planner for Nexus.
Your job is to create a properly formatted JSON plan step by step, to satisfy the goal given.
Create a list of subtasks based off the [GOAL] provided.
Each subtask must be from within the [AVAILABLE FUNCTIONS] list. Do not use any functions that are not in the list.
Base your decisions on which functions to use from the description and the name of the function.
Sometimes, a function may take arguments. Provide them if necessary.
The plan should be as short as possible.
You will also be given a list of corrective, suggestive and epistemic feedback from previous plans to help you make your decision.
For example:

[SPECIAL FUNCTIONS]
for-each- prefix
description: execute a function for each item in a list
args: 
- function: the function to execute
- list: the list of items to iterate over
- index: the arg name for the current item in the list

[AVAILABLE FUNCTIONS]
GetJokeTopics
description: Get a list ([str]) of joke topics

EmailTo
description: email the input text to a recipient
args:
- text: the text to email
- recipient: the recipient's email address. Multiple addresses may be included if separated by ';'.

Summarize
description: summarize input text
args:
- text: the text to summarize

Joke
description: Generate a funny joke
args:
- topic: the topic to generate a joke about

[GOAL]
"Get a list of joke topics and generate a different joke for each topic. Email the jokes to a friend."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "GetJokeTopics"},
            {"function": "for-each", "args": {"list": "output_GetJokeTopics", "index": "topic", "function": {"function": "Joke", "args": {"topic": "topic"}}}},
            {"function": "EmailTo", "args": {"text": "for-each_output_GetJokeTopics", "recipient": "friend"}}
        ]
    }

[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

Translate
description: translate the text to another language
args:
- text: the text to translate
- language: the language to translate to

[GOAL]
"Tomorrow is Valentine's day. I need to come up with a few date ideas.
She likes Edgar Allen Poe so write using his style.
E-mail these ideas to my significant other. Translate it to French."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "Brainstorm", args: {"input": "Valentine's Day Date Ideas"}},
            {"function": "Poe", "args": {"text": "output_Brainstorm"},
            {"function": "Translate", "args": {"text":"output_Poe", "language": "French"}}
            {"function": "EmailTo", "args": {"text": "output_Translate","recipient": "significant_other"}}            
        ]
    }
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  
  
[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

GetCoworkerEmails
description: returns a list[] of coworker emails

[GOAL]
"Tomorrow I am announcing my retirement.
I need to write a retirement speech in the style of Edgar Allen Poe.
Then I need to send the email to all of my coworkers."

[OUTPUT]    
    {
    "subtasks": [
        { "function": "Brainstorm", "args": { "input": "Retirement Speech Ideas"}},
        { "function": "Poe", "args": { "text": "output_Brainstorm"}},
        { "function": "GetCoworkerEmails"},
        { "function": "for-each", "args": {"list": "output_GetCoworkerEmails","index": "coworker","function": {"function": "EmailTo","args": {"text": "output_Poe","recipient": "coworker"}}}}
    ]
}
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  

[AVAILABLE FUNCTIONS]
save_file
description: 
    Save content to a file.

    :param filename: The name of the file including extension.
    :param content: The content to save in the file.
    
args:
- filename: filename
- content: content

search_wikipedia
description: Searches Wikipedia for the given query and returns a list[] of matching page_ids.
args:
- query: query

get_wikipedia_summary
description: Gets the summary of the Wikipedia page for the given page_id.
args:
- page_id: page_id

get_wikipedia_page
description: Gets the full content of the Wikipedia page for the given page_id.
args:
- page_id: page_id

[GOAL]
search wikipedia for pages on Calgary download all the page content and save it to a file

Be sure to only use functions from the list of available functions. 
The plan should be as short as possible. 
And only return the plan in JSON format.
[OUTPUT]

Goal: search wikipedia for pages on Calgary download all the page content and save it to a file
Plan: {'subtasks': [{'function': 'search_wikipedia', 'args': {'query': 'Calgary'}}, {'function': 'for-each', 'args': {'list': 'output_search_wikipedia', 'index': 'page_id', 'function': {'function': 'get_wikipedia_page', 'args': {'page_id': 'page_id'}}}}, {'function': 'save_file', 'args': {'filename': 'calgary_pages.txt', 'content': 'for-each_output_search_wikipedia'}}]}
Running stream for Oscar using engine OpenAIAgentEngine.
Plan for Oscar: Prompt: 
You are a planner for Nexus.
Your job is to create a properly formatted JSON plan step by step, to satisfy the goal given.
Create a list of subtasks based off the [GOAL] provided.
Each subtask must be from within the [AVAILABLE FUNCTIONS] list. Do not use any functions that are not in the list.
Base your decisions on which functions to use from the description and the name of the function.
Sometimes, a function may take arguments. Provide them if necessary.
The plan should be as short as possible.
You will also be given a list of corrective, suggestive and epistemic feedback from previous plans to help you make your decision.
For example:

[SPECIAL FUNCTIONS]
for-each- prefix
description: execute a function for each item in a list
args: 
- function: the function to execute
- list: the list of items to iterate over
- index: the arg name for the current item in the list

[AVAILABLE FUNCTIONS]
GetJokeTopics
description: Get a list ([str]) of joke topics

EmailTo
description: email the input text to a recipient
args:
- text: the text to email
- recipient: the recipient's email address. Multiple addresses may be included if separated by ';'.

Summarize
description: summarize input text
args:
- text: the text to summarize

Joke
description: Generate a funny joke
args:
- topic: the topic to generate a joke about

[GOAL]
"Get a list of joke topics and generate a different joke for each topic. Email the jokes to a friend."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "GetJokeTopics"},
            {"function": "for-each", "args": {"list": "output_GetJokeTopics", "index": "topic", "function": {"function": "Joke", "args": {"topic": "topic"}}}},
            {"function": "EmailTo", "args": {"text": "for-each_output_GetJokeTopics", "recipient": "friend"}}
        ]
    }

[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

Translate
description: translate the text to another language
args:
- text: the text to translate
- language: the language to translate to

[GOAL]
"Tomorrow is Valentine's day. I need to come up with a few date ideas.
She likes Edgar Allen Poe so write using his style.
E-mail these ideas to my significant other. Translate it to French."

[OUTPUT]
    {        
        "subtasks": [
            {"function": "Brainstorm", args: {"input": "Valentine's Day Date Ideas"}},
            {"function": "Poe", "args": {"text": "output_Brainstorm"},
            {"function": "Translate", "args": {"text":"output_Poe", "language": "French"}}
            {"function": "EmailTo", "args": {"text": "output_Translate","recipient": "significant_other"}}            
        ]
    }
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  
  
[AVAILABLE FUNCTIONS]
Brainstorm
description: Brainstorm ideas
args:
- input: the input to brainstorm about

Poe
description: Write in the style of author Edgar Allen Poe
args:
- text: the text to convert to Poe's style

EmailTo
description: Write an email to a recipient
args:
- text: the text of the email
- recipient: the recipient's email address.

GetCoworkerEmails
description: returns a list[] of coworker emails

[GOAL]
"Tomorrow I am announcing my retirement.
I need to write a retirement speech in the style of Edgar Allen Poe.
Then I need to send the email to all of my coworkers."

[OUTPUT]    
    {
    "subtasks": [
        { "function": "Brainstorm", "args": { "input": "Retirement Speech Ideas"}},
        { "function": "Poe", "args": { "text": "output_Brainstorm"}},
        { "function": "GetCoworkerEmails"},
        { "function": "for-each", "args": {"list": "output_GetCoworkerEmails","index": "coworker","function": {"function": "EmailTo","args": {"text": "output_Poe","recipient": "coworker"}}}}
    ]
}
    
[SPECIAL FUNCTIONS]
for-each
description: execute a function for each item in a list
args: 
- function: the function to execute
- iterator: the list of items to iterate over
- index: the arg name for the current item in the list  

[AVAILABLE FUNCTIONS]
save_file
description: 
    Save content to a file.

    :param filename: The name of the file including extension.
    :param content: The content to save in the file.
    
args:
- filename: filename
- content: content

search_wikipedia
description: Searches Wikipedia for the given query and returns a list[] of matching page_ids.
args:
- query: query

get_wikipedia_summary
description: Gets the summary of the Wikipedia page for the given page_id.
args:
- page_id: page_id

get_wikipedia_page
description: Gets the full content of the Wikipedia page for the given page_id.
args:
- page_id: page_id

[GOAL]
search wikipedia for pages on Calgary download all the page content, summarize each page and save it a file

Be sure to only use functions from the list of available functions. 
The plan should be as short as possible. 
And only return the plan in JSON format.
[OUTPUT]

Goal: search wikipedia for pages on Calgary download all the page content, summarize each page and save it a file
Plan: {'subtasks': [{'function': 'search_wikipedia', 'args': {'query': 'Calgary'}}, {'function': 'for-each', 'args': {'list': 'output_search_wikipedia', 'index': 'page_id', 'function': {'function': 'get_wikipedia_page', 'args': {'page_id': 'page_id'}}}}, {'function': 'for-each', 'args': {'list': 'for-each_output_search_wikipedia', 'index': 'page_id', 'function': {'function': 'get_wikipedia_summary', 'args': {'page_id': 'page_id'}}}}, {'function': 'save_file', 'args': {'filename': 'Calgary_Summary.txt', 'content': 'for-each_output_for-each_output_search_wikipedia'}}]}
Error in function 'get_wikipedia_summary': Expecting value: line 1 column 1 (char 0)
Error in function 'get_wikipedia_summary': Expecting value: line 1 column 1 (char 0)
Error in function 'get_wikipedia_summary': Expecting value: line 1 column 1 (char 0)
Error in function 'get_wikipedia_summary': Expecting value: line 1 column 1 (char 0)
Error in function 'get_wikipedia_summary': An unknown error occured: "Search request is longer than the maximum allowed length. (Actual: 973; allowed: 300)". Please report it on GitHub!
Error in function 'get_wikipedia_summary': Expecting value: line 1 column 1 (char 0)
Error in function 'get_wikipedia_summary': An unknown error occured: "Search request is longer than the maximum allowed length. (Actual: 6000; allowed: 4096)". Please report it on GitHub!
Error in function 'get_wikipedia_summary': An unknown error occured: "Search request is longer than the maximum allowed length. (Actual: 3250; allowed: 300)". Please report it on GitHub!
Error in function 'get_wikipedia_summary': An unknown error occured: "Search request is longer than the maximum allowed length. (Actual: 5485; allowed: 4096)". Please report it on GitHub!
Running stream for Oscar using engine OpenAIAgentEngine.
